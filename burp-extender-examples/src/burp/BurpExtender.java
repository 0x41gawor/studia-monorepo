package burp;

import java.net.URL;
import java.util.ArrayList;
import java.util.List;

public class BurpExtender implements IBurpExtender,
        //Extensions can implement this interface and then call IBurpExtenderCallbacks.registerScannerCheck() to
        // register a custom Scanner check. When performing scanning,
        // Burp will ask the check to perform active or passive scanning on the base request,
        // and report any Scanner issues that are identified.
        IScannerCheck {

    private IBurpExtenderCallbacks callbacks;
    private IExtensionHelpers helpers;

    // test / grep strings
    private static final byte[] GREP_STRING = "Page generated by:".getBytes();  // This is the string we are looking for in responses
    private static final byte[] INJ_TEST = "|".getBytes();                      // This is the character (put in request) causing an error
    private static final byte[] INJ_ERROR = "Unexpected pipe".getBytes();       // ^Error message returned in response

    //
    // implement IBurpExtender
    //
    @Override
    public void registerExtenderCallbacks(IBurpExtenderCallbacks callbacks) {
        this.callbacks = callbacks;
        helpers = callbacks.getHelpers();
        callbacks.setExtensionName("Custom scanner checks");

        // register ourselves as a custom scanner check
        callbacks.registerScannerCheck(this);
    }

    //
    // implement IScannerCheck
    //

    @Override// from IScannerCheck
    // The Scanner invokes this method for each base request / response that is passively scanned.
    // Note: Extensions should only analyze the HTTP messages provided during passive scanning,
    // and should not make any new HTTP requests of their own.
    // Method returns list of Scan Issues if any
    public List<IScanIssue> doPassiveScan(IHttpRequestResponse baseRequestResponse) {
        // look for matches for our passive check grep string
        List<int[]> matches = getMatches(baseRequestResponse.getResponse(), GREP_STRING); // we created our method to do that

        // if we found any matches
        if (matches.size() > 0) {
            // report the issue
            List<IScanIssue> issues = new ArrayList<>(1); // 1 cuz we know we have at least one from if statement

            issues.add(new CustomScanIssue(
                    baseRequestResponse.getHttpService(),
                    helpers.analyzeRequest(baseRequestResponse).getUrl(),
                    new IHttpRequestResponse[] {callbacks.applyMarkers(baseRequestResponse, null, matches)},
                    "CMS Info Leakage", // CMS stays for Content Management System
                    "The response contains the string: " + helpers.bytesToString(GREP_STRING),
                    "Information"));
            return issues;
        }

        // Note callbacks.applyMarkers method.
        // It apply markers  on HTTP message so Burp can render some highlights there
        // to put our attention to specific HTTP message places.

        return null;
    }

    // this auxiliary method returns the range of indexes where match occurs in HTTP response message
    // it returns list of 2-elem. arrays
    private List<int[]> getMatches(byte[] response, byte[] match) {
        List<int[]> matches = new ArrayList<int[]>();

        int start = 0;
        while (start < response.length) {
            start = helpers.indexOf(response, match, true, start, response.length);
            // `int helpers.indexOf(byte[] data, byte[] pattern, boolean caseSensitive, int from, int to);`

            if (start == -1) {
                break;
            }
            matches.add(new int[] {start, start+match.length});
            start += match.length; // `helpers.indexOf` only returns the first match
        }

        return matches;
    }

    @Override // from IScannerCheck
    // The Scanner invokes this method for each insertion point that is actively scanned.
    // Extensions may issue HTTP requests as required to carry out active scanning,
    // and should use the IScannerInsertionPoint object provided to build scan requests for particular payloads.
    // Note: Scan checks should submit raw non-encoded payloads to insertion points, and the insertion point has responsibility
    // for performing any data encoding that is necessary given the nature and location of the insertion point.

    // How does Burp works?
    // If Burp sees that HTTP request matches some defined (default or by user) Insertion Points, Burp sends this such pair to this method
    public List<IScanIssue> doActiveScan(IHttpRequestResponse baseRequestResponse, IScannerInsertionPoint insertionPoint) {
        // make a request containing our injection test in the insertion point
        byte[] checkRequest = insertionPoint.buildRequest(INJ_TEST); //here `INJ_TEST` is the payload from prev (`8.`) example
        // that's how we send request
        IHttpRequestResponse checkRequestResponse = callbacks.makeHttpRequest(baseRequestResponse.getHttpService(), checkRequest);

        // look for matches in response for our payloaded request
        List<int[]> matches = getMatches(checkRequestResponse.getResponse(), INJ_ERROR);

        if (matches.size() > 0) {
            // get the offsets of the payload within the request, for in-UI highlighting
            List<int[]> requestHighlights = new ArrayList<>(1);
            requestHighlights.add(insertionPoint.getPayloadOffsets(INJ_TEST));

            // report the issue
            List<IScanIssue> issues = new ArrayList<>(1);
            issues.add(new CustomScanIssue(
                    baseRequestResponse.getHttpService(),
                    helpers.analyzeRequest(baseRequestResponse).getUrl(),
                    new IHttpRequestResponse[]{callbacks.applyMarkers(checkRequestResponse, requestHighlights, matches)},
                    "Pipe injection",
                    "Submitting a pipe character returned the string: " + helpers.bytesToString(INJ_ERROR),
                    "High"));
            return issues;
        }
        return null;
    }


    @Override//from IScannerCheck
    //The Scanner invokes this method when the custom Scanner check has reported multiple issues for the same URL path.
    // This can arise either because there are multiple distinct vulnerabilities,
    // or because the same (or a similar) request has been scanned more than once.
    // The custom check should determine whether the issues are duplicates.
    // In most cases, where a check uses distinct issue names or descriptions for distinct issues,
    // the consolidation process will simply be a matter of comparing these features for the two issues.
    public int consolidateDuplicateIssues(IScanIssue existingIssue, IScanIssue newIssue) {
        // Since the issue name is sufficient to identify our issues as different,
        // if both issues have the same name, only report the existing issue
        // otherwise report both issues
        if (existingIssue.getIssueName().equals(newIssue.getIssueName()))
            return -1;
        else return 0;
    }
}

//
// class implementing IScanIssue to hold our custom scan issue details
//
class CustomScanIssue implements IScanIssue {

    private IHttpService httpService;
    private URL url;
    private IHttpRequestResponse[] httpMessages;
    private String name;
    private String detail;
    private String severity;

    public CustomScanIssue(
            IHttpService httpService,
            URL url,
            IHttpRequestResponse[] httpMessages,
            String name,
            String detail,
            String severity)
    {
        this.httpService = httpService;
        this.url = url;
        this.httpMessages = httpMessages;
        this.name = name;
        this.detail = detail;
        this.severity = severity;
    }

    @Override
    public URL getUrl() {
        return url;
    }

    @Override
    public String getIssueName() {
        return name;
    }

    @Override
    public int getIssueType() {
        return 0;
    }

    @Override
    public String getSeverity() {
        return severity;
    }

    @Override
    public String getConfidence() {
        return "Certain";
    }

    @Override
    public String getIssueBackground() {
        return null;
    }

    @Override
    public String getRemediationBackground() {
        return null;
    }

    @Override
    public String getIssueDetail() {
        return detail;
    }

    @Override
    public String getRemediationDetail() {
        return null;
    }

    @Override
    public IHttpRequestResponse[] getHttpMessages() {
        return httpMessages;
    }

    @Override
    public IHttpService getHttpService() {
        return httpService;
    }
}